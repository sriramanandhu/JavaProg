/* 16. Create a thread named NumberSet to generate a set of random numbers. create 
a thread SumThread which uses the NumberSet thread to find the sum of all numbers. 
create another thread PrimeThread that also uses the NumberSet thread to count 
the number of prime numbers among the numbers generated by the NumberSet thread. 
Write a driver class to demonstrate the multithreading program. */
import java.util.*;

class NumberThread extends Thread {
    Random rand = new Random();
    int val, bound = 100;

    public void run() {
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of values: ");
        int n = scan.nextInt();
        for (int i = 0; i < n; i++) {
            val = rand.nextInt(bound);
            System.out.println("\nRandom number is " + val);

            // SumThread
            Runnable r1 = new SumThread(val);
            Thread t1 = new Thread(r1);
            // PrimeThread
            Runnable r2 = new PrimeThread(val);
            Thread t2 = new Thread(r2);

            t1.start();
            t2.start();
            try {
                t1.join();
                t2.join();
            } catch (InterruptedException ie) {
                ie.printStackTrace();
            }

            // wait for 1 second. (1000 milliseconds)
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ie) {
                ie.printStackTrace();
            }
        }
    }
}

class SumThread implements Runnable {
    int val;
    static int total;

    SumThread(int v) {
        val = v;
    }

    public void run() {
        total += val;
        System.out.println("SumThread :: total = "+total);
    }
}

class PrimeThread implements Runnable {
    int val;
    static int primeCount;

    PrimeThread(int v) {
        val = v;
    }

    public void run() {
        if (isPrime(val)) {
            primeCount += 1;
        }
        System.out.println("PrimeThread :: count of prime no. = "+primeCount);
    }

    static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

public class SumPrimeDemo {
    public static void main(String[] args) {
        NumberThread nt = new NumberThread();
        nt.start();
    }
}
